{"version":3,"sources":["serviceWorker.js","components/List.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","List","props","todos","map","todo","i","key","onClick","handleRemove","App","state","value","e","this","setState","target","alert","preventDefault","concat","index","splice","type","onChange","add","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCJSC,EAZF,SAACC,GAAD,OACX,4BACGA,EAAMC,MAAMC,KAAI,SAACC,EAAMC,GACtB,OACE,wBAAIC,IAAKD,GACND,EACD,4BAAQG,QAAS,kBAAMN,EAAMO,aAAaH,KAA1C,sBC6CKI,E,kDAjDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPP,KAAM,IAJI,E,qDAQLQ,GACPC,KAAKC,SAAS,CAAEH,MAAOC,EAAEG,OAAOJ,U,0BAE9BC,GACuB,KAArBC,KAAKH,MAAMC,OACbK,MAAM,0DACNJ,EAAEK,mBAEFJ,KAAKC,SAAS,CAAEV,KAAMS,KAAKH,MAAMN,KAAKc,OAAOL,KAAKH,MAAMC,SACxDE,KAAKC,SAAS,CAAEH,MAAO,KACvBC,EAAEK,oB,mCAIOE,GACXN,KAAKH,MAAMN,KAAKgB,OAAOD,EAAO,GAC9BN,KAAKC,SAAS,CAAEV,KAAMS,KAAKH,MAAMN,S,+BAGzB,IAAD,OACP,OACE,6BACE,sDACA,8BACE,2BACEiB,KAAK,OACLV,MAAOE,KAAKH,MAAMC,MAClBW,SAAU,SAACV,GAAD,OAAO,EAAKU,SAASV,MAEjC,4BAAQL,QAAS,SAACK,GAAD,OAAO,EAAKW,IAAIX,KAAjC,iBAGF,kBAAC,EAAD,CACEV,MAAOW,KAAKH,MAAMN,KAClBI,aAAc,SAACW,GAAD,OAAW,EAAKX,aAAaW,W,GA3CnCK,aCGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01186b85.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst List = (props) => (\n  <ul>\n    {props.todos.map((todo, i) => {\n      return (\n        <li key={i}>\n          {todo}\n          <button onClick={() => props.handleRemove(i)}>削除</button>\n        </li>\n      );\n    })}\n  </ul>\n);\nexport default List;\n","import React, { Component } from \"react\";\nimport List from \"./components/List\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      todo: [],\n    };\n  }\n\n  onChange(e) {\n    this.setState({ value: e.target.value });\n  }\n  add(e) {\n    if (this.state.value === \"\") {\n      alert(\"入力されていません\");\n      e.preventDefault();\n    } else {\n      this.setState({ todo: this.state.todo.concat(this.state.value) });\n      this.setState({ value: \"\" });\n      e.preventDefault();\n    }\n  }\n\n  handleRemove(index) {\n    this.state.todo.splice(index, 1);\n    this.setState({ todo: this.state.todo });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>ToDoリスト</h1>\n        <form>\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={(e) => this.onChange(e)}\n          />\n          <button onClick={(e) => this.add(e)}>追加</button>\n        </form>\n\n        <List\n          todos={this.state.todo}\n          handleRemove={(index) => this.handleRemove(index)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}